{"name":"ptimeout","tagline":"A timeout command with process garbage collection","body":"\r\n[![Build Status](https://api.travis-ci.org/guillon/ptimeout.png?branch=master)](https://travis-ci.org/guillon/ptimeout/branches)\r\n\r\n# Synopsys\r\n\r\nThe ptimeout utility is a python script implementing an interface similar to\r\nGNU timeout with the additional ability to terminate all processes launched\r\nfrom the timeout session.\r\n\r\nIn order to terminate all processes launched as part of the timeout\r\nsession, an environment variable is propagated along with processes creation.\r\n\r\nThis heuristic enables terminations of detached processes even when\r\nthey are not anymore in the process parent-child tree.\r\n\r\nThis also avoids the usage of process groups or process session leadership\r\nwhich have some undesirable effect observed with timeout tools provided\r\nwith standard distributions. This approach is thus more transparent w.r.t.\r\nto overall process management.\r\n\r\nThe limitation to this approach is when some process reset its environment,\r\nin which case it will not be tracked anymore (nor any of its child) by\r\nthe termination heuristic. In this case the sub-process tree may not\r\nterminate as part of the timeout session.\r\n\r\n# Download\r\n\r\nDownload the last stable version of the script from there:\r\nhttps://raw.githubusercontent.com/guillon/ptimeout/master/ptimeout\r\n\r\n# Examples\r\n\r\nA typical usage of such a tool if for limiting the time of a batch job\r\nwhich may fall into non terminating condition such as in validation\r\nscripts or test processes.\r\n\r\nAlso one generally expect the whole set of executed processes as part of\r\nthe job lifetime to be teminated when the job terminates, hence the\r\ntermination heuristic.\r\n\r\nExample of usage for limiting a batch script to 1 hour duration:\r\n\r\n    $ ptimeout 3600 script.sh\r\n\r\nBy default script.sh and all process executed from its process tree will\r\nbe terminated with SIGTERM after 3600 seconds, or killed by SIGKILL 10\r\nseconds after if still persistent.\r\n\r\nIf one wants only process garbage collection, use a timeout of 0 as in:\r\n\r\n    $ ptimeout 0 script.sh\r\n\r\nIn this case, the tool will not bound the execution time, but will still\r\ngarbage collect all processes when receiving an interrupting signal.\r\n\r\nThe usage of ptimeout can be recursive and there is not side effect with\r\nrespect to interactive/sessions/tty modes.\r\n\r\nGet the command line help with:\r\n\r\n    $ ptimeout --help\r\n    usage: ptimeout [-h] [-v] [-d] [-s SIGNAL] [-k KILL_AFTER] [-c CATCH_SIGNALS]\r\n                [-l LIST] [-f FORMAT]\r\n                [duration] [command] ...\r\n    ....\r\n\r\n\r\n# Build and Install\r\n\r\nThis script requires python 2.6, 2.7 or 3.3+.\r\n\r\nThe script can be used directly without installation.\r\n\r\nA makefile is provided anyway for completion and testing purpose.\r\n\r\nBuild with:\r\n\r\n    $ make all # a no-op actually\r\n\r\nRun unittests with:\r\n\r\n    $ make check\r\n\r\nInstall with, for instance:\r\n\r\n    $ make install PREFIX=$HOME/local  # Default is PREFIX=/usr/local\r\n\r\n\r\n# References\r\n\r\nRefer to the project home page at:\r\nhttp://guillon.github.com/ptimeout\r\n\r\nRefer to the current build and validation status at:\r\nhttps://travis-ci.org/guillon/ptimeout?branches\r\n\r\nFill issues and enhancement request at:\r\nhttps://github.com/guillon/ptimeout/issues\r\n\r\n\r\n# License\r\n\r\nThe tool is distributed under the GPLv2 license.\r\n\r\nRefer to the COPYING file: https://github.com/guillon/ptimeout/blob/master/COPYING\r\nRefer to the COPYRIGHT file: https://github.com/guillon/ptimeout/blob/master/COPYRIGHT\r\n","google":"UA-50872352-1","note":"Don't delete this file! It's used internally to help with page regeneration."}